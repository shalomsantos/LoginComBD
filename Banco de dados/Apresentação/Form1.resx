<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        wWECwsHBYQLCwcFhAsLBwWECwsHBYQLCwcFhAsLBwWECwsHBYQLCwWECYgLCwWECYgLCwWECYgLCwWEC
        YgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWEC
        YgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECYgLCwWECUklwcJiA
        VCYcHCYglQkHhwlIZcLBYQJSmXBwmIBUJhwcJiAcHBwmIBwcHCYgHBwcJiAcHBwmIBwcHCYgHBxcMhNw
        /34XmYC33HKDZQLeRyXBwTlqAu5xnQmYl6dy36N0wHuoJDg4R03A38v2AjeagLrEDioJDs5R7jcSETea
        gD6JO6gkODhHuXvM0ba7TMBAIOCR4cmNVBIcnKPcTyX8BQVR95iAlZUz2juBYDB4JZUEB+cot1k+89TX
        x7yuMQHV9rVrV+jhcHil7PRnVBIcnCPcYYmLzOF/2DUmoPp87tymfOkAquU04D0qEw7OEe4jya+mVauW
        6b1NfltNQMVJB2D4/b7B8qf2UplwcI5owG9Go5HJLS0NETuS3zYTUP189NGHveblid9SmXBwjmjAfxw8
        eNDQpqY6WzRg20xA9b5//1JrMHETlQkHZz8XDAbvnDRpQnT58vO8vUx+e03ATucSHs8CiU+pTDg4W7lD
        0gF8QyXYV786vbfJb68JqKKiYqDVAYyQc5X/pjLh4Gzl3vT5tInqEmAvNWD7TUAr1D0BEmHZyV9SmXBw
        tt4D8Ihsj/Zyzs4ZE9CKWKxSW7FiqR4Ohy6Wnf6CyoSDs427IskVO3eYgIlcc3N9pKAgeqb0WHupTDg4
        W7j9EhO7dACaq0xAi6utrQqXlPQNyH7+hMqEg7OF+4WEYUPyO2cCJnKy8+pPz5Z4j8qEg+sV97FEW8Ls
        vy3Jb7sJmOSSYB5PCoKD6zX3qESxrgdtT35bTcAk6wOoV6N8mQ+pTDi40+I+lVjq9/s8cmpte/LbagJ2
        7VVCIcNjGEaEh4XAwZ02p5b/Ku7FQ0BSZwIm45YsWWBEIpFG+XJ/pTLh4E6J+1+JFrtu/XXcBEzGybCl
        4KyzxhV4vd5bqXQ4uFPitoXD4Ty15L7Nye+cCZiMM+cChks8Q6XDwfWIe1HTtAnnnTffsDH5nTcBk3Ej
        Rw63JgQXmsMaKh0O7sTcARkxr62rqw7X1FTamfypMQG7uUswKPFD+dJHqHQ4uBMu+vHzoUMHl9TV1URt
        Tv7UmIDdrRosX36AxCNUOhxc0uT/p8LCgrE2rviTHhPwRNy5584ziooKvyaF8ByVDgfXKfn3hsOhWGtr
        Y0qS31ET8EScOqeZP7/F0DRvrfyXr1LpcHDtyf+WYehL6utrorHY7JQlv2MmYHfcwoVt3n79+qr/dr7E
        X2gccDme/O/pevAbM2Z8pSgerw5XVaUu+R0zAbvj5syptQYdahHRxaoToHHA5WryB4PBb06fPqVYjv6h
        qqqZqUr+1JiAJ+Lkix/rBOS1UAppH40DLseS/2115O9I/liqkz81JmB3XFNTvWfdugu86pwnPz9/rhTW
        n2gccDmS/H+Wc/6latifhiN/ak3Ak3HSARTMm9dsaJo2RQrndzQOuCxP/ifD4VCtmvDrOOdPWfKnxwTs
        CdfQUOs1Vzstl/hb9QgkGhFcFhp+2woLC8a1ts6JqJFvCif80mcC9oSTwkicF1BLHy2V98/TiOCyhHtJ
        2vOFQ4YMLkmV5OMqE7AnXGlpibmOQMij7n+ORiMTdT24VQr1fRoRXIZyH0psl9PbiWqtTAf13swwAXvK
        1dRUhtUwafToUUWa5q2X3fyNxCc0NrgM4T4zl/JqlfP9vMWL5xsO3NiTeSbgqXJXXfUtr1oOSV6FEosk
        /rHjEck0NjhXcuog9QeJ5RJ9VMNtaIiF0p1HrjIBezE3oF5qcZFmKfi7Jd6Qwj9Co4RzAaeM1ntNu7WP
        mtB2YBmv7DABT/dcZeLEMz2ffLLfs2LFEn3ChPElkUj+NOkMLjMfR64q4AsaJVyKuMPy821pf2qYf7XE
        ZDV9pdqpWr03Hq/WXJ786TUBe8upxRJUYZuXDiMSEyRWS/xUKuVp9SBF+exjRghwNnEfqxt25HT02WAw
        uEPiEk3TVNIXJA5Pp0+f4qoRtKtNwN5y8XhVYtl7fD7N07dvn0BZWemgPn2KpxmGMU8qbb18dIPEzyTu
        k1APWPyDuu9aKvOpQCDwlPz8Z/Veth8XStqAyxnuSXm/x5TR1PMstkrcJHGJbG9TI86KioHD1BqXHQcf
        X6f257b8yBgT0A6upqZSheoUwg0NseiCBa3tj1GSXtqqHzVUUKOGqPTexf37l5UPGVIxZMCAsnJ5ryZr
        irtGMBjoI9xAuJziCs0n8Kq2EhCmvfGsWXO+rq5KNTfXh1avXu6dNm2yq+fOMs4EdIpLfIXDIc8zzzzu
        bWysC9XXx6Lqp5qo0XW9E6fO4dT2pia4XOai0YhHPvNmYrvPOBMQDg4ux01AODg4TEA4ODhMQDg4uJw3
        AeHg4DAB4eDgMAHh4OAwAeHg4DAB4eDgMAHh4OAwAeHg4DAB4eDgbDMBrUuCJ1vIEA4OLkO5E5mA1mxh
        XtdzBjg4uKzhknYA1iVBI3G2sJvriXBwcJnJeZMd/X3mH+juqgAcHFzmcv9vAiY5+vuSnS/AwcFlH/d/
        wEEIG3rw+2UAAAAASUVORK5CYII=
</value>
  </data>
</root>